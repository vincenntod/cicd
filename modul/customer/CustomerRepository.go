// Code generated by mockery v2.20.0. DO NOT EDIT.

package customer

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// CustomerRepositoryStruct is an autogenerated mock type for the CustomerRepositoryStruct type
type CustomerRepositoryStruct struct {
	mock.Mock
}

// AddCustomer provides a mock function with given fields: c
func (_m *CustomerRepositoryStruct) AddCustomer(c *gin.Context) (Customer, error) {
	ret := _m.Called(c)

	var r0 Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (Customer, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) Customer); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(Customer)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomer provides a mock function with given fields: c
func (_m *CustomerRepositoryStruct) DeleteCustomer(c *gin.Context) (Customer, error) {
	ret := _m.Called(c)

	var r0 Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (Customer, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) Customer); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(Customer)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EditCustomer provides a mock function with given fields: c
func (_m *CustomerRepositoryStruct) EditCustomer(c *gin.Context) (Customer, error) {
	ret := _m.Called(c)

	var r0 Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (Customer, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) Customer); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(Customer)
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowCustomer provides a mock function with given fields: c
func (_m *CustomerRepositoryStruct) ShowCustomer(c *gin.Context) ([]Customer, error) {
	ret := _m.Called(c)

	var r0 []Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) ([]Customer, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) []Customer); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShowCustomerByName provides a mock function with given fields: c
func (_m *CustomerRepositoryStruct) ShowCustomerByName(c *gin.Context) ([]Customer, error) {
	ret := _m.Called(c)

	var r0 []Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) ([]Customer, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) []Customer); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCustomerRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCustomerRepository creates a new instance of CustomerRepositoryStruct. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCustomerRepository(t mockConstructorTestingTNewCustomerRepository) *CustomerRepositoryStruct {
	mock := &CustomerRepositoryStruct{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
